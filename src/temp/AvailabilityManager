import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;

import sun.rmi.runtime.Log;
import Components.*;

import com.vmware.vim25.*;
import com.vmware.vim25.mo.*;


public class AvaliabilityManager {
	
	private Credential credentials;
	
	// for vCenter
	private ServiceInstance vCenterServiceInstance;
	private Folder rootFolderOfvCenter;
	
	// for mgmt center
	private ServiceInstance mgmtCenterServiceInstance;
	private Folder rootFolderOfMgmtCenter;
	private ManagedEntity resourcePool;
	
	// all instances
	private ArrayList<ManagedEntity> vmList;
	private ArrayList<ManagedEntity> hostList;
	private ArrayList<ManagedEntity> vmListOfRecPool;
	
	// all helper
	private VmToHostMapper vmToHostMapper;	
	private LivenesMonitor livenessMonitor;
	
	
	// constructor
	public AvaliabilityManager() throws Exception {
		
		// get service instance in vCenter
		vCenterServiceInstance = ServiceInstanceGetter.getServiceInstance
				(credentials.getvCenterIpAddr(), credentials.getUsrName(), credentials.getPasswd());
		// get root folder of the vCenter
		rootFolderOfvCenter = RootFolderGetter.getRootFolder(vCenterServiceInstance);
		// get all VMs in the vCenter, excluding hosts
		vmList = InstanceGetter.getAllInstance(rootFolderOfvCenter, "VirtualMachine");
		// get all hosts
		hostList = InstanceGetter.getAllInstance(rootFolderOfvCenter, "HostSystem");
		

		// get service instance in Management center
		mgmtCenterServiceInstance = ServiceInstanceGetter.getServiceInstance
				(credentials.getManagementCenterIpAddr(), credentials.getUsrName(), credentials.getPasswd());
		// get root folder of the management center
		rootFolderOfMgmtCenter = RootFolderGetter.getRootFolder(mgmtCenterServiceInstance);		
		// get resource pool for the given name
		resourcePool = ResourcePoolGetter.getResourcePool(rootFolderOfMgmtCenter, credentials.getResourcePoolName());
		// get all VMs in the resource pool
		vmListOfRecPool = new ArrayList<ManagedEntity>(Arrays.asList(((ResourcePool)resourcePool).getVMs()));
		
		
		// instantiate the vm to host map
		vmToHostMapper = new VmToHostMapper(hostList);
		
		// set alarm for all VMs
		for(ManagedEntity vm : vmList) {
			CreateVmPowerStateAlarm.registerAlarmToVm(vCenterServiceInstance, vm);
		}
		
		// instantiate monitors for all VMs
		livenessMonitor = new LivenesMonitor(credentials.getTimeout());
		
	}
	
	public void run() {

		// monitor the VM by pinging
		livenessMonitor.isReachable(vm);
		
			
		// VM is not responding: identify who has problem

			// check vHost (only start pinging vHost at this point)
        
                // find the vHost
                /*FindHostTasker*/
        
                // ping the host
                /*LivenessMonitor*/
        
		
			/*** Two cases ***/
		
			// Case1: VM down, vHost OK
		
				// Check VM power state
                /*PowerStateChecker*/
		
					/*** Two cases ***/
		
					// Case1: power is off
		
						// check alarm state: check if on purpose or by accident
                        /*AlarmMonitor*/
			
							/*** Two cases ***/
			
							// Case1: alarm is on: on purpose
			
									// Do nothing
			
							// Case2: alarm is off: failure happened (Cannot happen)
			
									/* vHost is powered off */
                                    // GOTO: recovery process
        
		
					// Case2: power is on
		
						// failure: revert to the current snapshot
                        /*RevertToSnapshotManager*/
        
                        // power on the VM
                        /*PowerOnOperator*/
        
        
		
			// Case2: vHost down, thus VM also down too
		
				// check vHost power state
                /*PowerStateChecker*/
		
				/*** Two cases ***/
		
				// Case1: power is off (No need to check alarm)
		
					// take action immediately
        
                        // power on the vHost
                        /*PowerOnOperator*/
        
                        // get the VM belongs to the vHost
                        /*InstanceGetter*/
        
                        // power on the VMs
                        /*PowerOnOperator*/
        
        
		
				// Case2: power is on
		
					// vHost has problem, thus VM is also not reachable: take action
		
						// revert the vHost to the current snapshot
                        /*RevertToSnapshotManager*/
		
						// power on the vHost
                        /*PowerOnOperator*/
		
                        // get the VM belongs to the vHost
                        /*InstanceGetter*/
        
                        // power on the VMs
                        /*PowerOnOperator*/

	}
}
