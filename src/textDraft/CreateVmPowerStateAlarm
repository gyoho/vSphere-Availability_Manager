 /**
   * Responsibility: create VmPowerStateAlarm for VM
   *
   * @param instance: vHost, VM
   * @return none: use try/catch to catch exception
   *
   */


// Action to perform when the alarm is triggered
AlarmAction emailAction = createAlarmTriggerAction(createEmailAction());
// Top-level alarm expression that defines trigger conditions
AlarmExpression expression = createAlarmExpression();
// Tolerance and maximum frequency settings
AlarmSetting alarmset = createAlarmSetting();


	AlarmSpec spec = new AlarmSpec();
	spec.setAction(emailAction);
	spec.setExpression(expression);
	spec.setName("VmPowerStateAlarm");
	spec.setDescription("Monitor VM state and send notification trap if VM powers off");
	spec.setEnabled(true);
	spec.setSetting(alarmset);
	
	
	AlarmManager alarmMgr = serviceInstance.getAlarmManager();	
	alarmMgr.createAlarm(vm, spec);
}

private static SendEmailAction createEmailAction() {
    SendEmailAction action = new SendEmailAction();
    action.setToList("yaopeng.gyoho.wu@gmail.com");
    action.setCcList("test@test.com");
    action.setSubject("Alarm - VM Powered Off\n");
    action.setBody("Description:{eventDescription}\n"
        + "TriggeringSummary:{triggeringSummary}\n"
        + "newStatus:{newStatus}\n"
        + "oldStatus:{oldStatus}\n"
        + "target:{target}");
    return action;
}

private static AlarmExpression createAlarmExpression() {
	StateAlarmExpression expression = new StateAlarmExpression();
    expression.setType("VirtualMachine");
    expression.setStatePath("runtime.powerState");
    expression.setOperator(StateAlarmOperator.isEqual);
    expression.setYellow("poweredOff");
    return expression;
}

private static AlarmTriggeringAction createAlarmTriggerAction(Action action) {
	AlarmTriggeringAction alarmAction = new AlarmTriggeringAction();
    alarmAction.setYellow2red(true);
    alarmAction.setAction(action);
    return alarmAction;
}

private static AlarmSetting createAlarmSetting() {
	AlarmSetting alarmset = new AlarmSetting();
	alarmset.setReportingFrequency(0);
	alarmset.setToleranceRange(0);
	return alarmset;
}